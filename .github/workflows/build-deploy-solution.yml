name: build-deploy-solution
# TODO: Makes sure this gets associated with the PR

on:
  workflow_dispatch:
    inputs:
      ref:
        required: true
        description: "ref to build from"
        default: "test_branch"
      sha:
        required: false
        description: "sha"
        default: "f0c9c52ee39287c783d418b6e7cfad2364a33fff"
      solution_name:
        required: true
        description: "solution to build"
        default: "PVAsolution"
      environment:
        required: true
        description: "environment where the build will be deployed"
        default: "UAT"
      solution_action:
        required: true
        description: "update or upgrade the solution"
        default: "update"
      unmanaged:
        description: "unmanaged"
        required: false
        default: "false"
      tag:
        description: "tag"
        required: false

jobs:
  build-solution:
    runs-on: ubuntu-latest
    name: build solution
    environment: ${{ github.event.inputs.environment }}
    steps:
      - if: contains(github.event.inputs.ref, 'refs/pull')
        name: update-commit-status
        id: update-commit-status
        uses: actions/github-script@v5
        env:
          CONTEXT_TO_USE: build-deploy-${{ github.event.inputs.solution_name }}
          SHA: ${{ github.event.inputs.sha }}
          TARGET_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            console.log(process.env.CONTEXT_TO_USE)
            console.log(process.env.SHA)
            console.log(process.env.TARGET_URL)

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: process.env.SHA,
              context: process.env.CONTEXT_TO_USE,
              state: "pending",
              target_url: process.env.TARGET_URL
            })

      - uses: actions/checkout@v2

      - name: build-solution
        uses: ./.github/actions/build-solution
        with:
          ref: ${{ github.event.inputs.ref }}
          solution_name: ${{ github.event.inputs.solution_name }}
          solution_package_source: "src/${{ github.event.inputs.solution_name }}/SolutionPackage"

      - name: debug-step
        shell: bash
        run: |
          echo "solution_action ${{ github.event.inputs.solution_action }}"
          echo "environment ${{ github.event.inputs.environment }}"
          echo "solution_name ${{ github.event.inputs.solution_name }}"

      #- name: mask-inputs
      #  shell: bash
      #  run: |
      #    echo "::add-mask::${{ github.event.inputs.environment_url }}"

      - uses: Firenza/secrets-to-env@v1.1.0
        with:
          secrets: ${{ toJSON(secrets) }}

      - uses: cschleiden/replace-tokens@v1
        with:
          files: '["src/${{ github.event.inputs.solution_name }}/config/deploymentSettings.json"]'

      - name: get solution zip
        id: get-solution-zip
        shell: pwsh
        run: |
          # unmanaged means we are targeting a dev environment
          if ([System.Convert]::ToBoolean("${{ github.event.inputs.unmanaged }}")) {
            $files = Get-ChildItem -Path "${{ runner.temp }}/${{ github.event.inputs.solution_name }}" -Recurse | Where-Object{$_.Name.EndsWith('.zip') -and !$_.Name.EndsWith('_managed.zip')}
          }
          else {
            $files = Get-ChildItem -Path "${{ runner.temp }}/${{ github.event.inputs.solution_name }}" -Recurse | Where-Object{$_.Name.EndsWith('_managed.zip')}
          }

          $solutionZip = $files[0].FullName
          echo "::set-output name=solution_zip::$solutionZip"

      - name: import-solution-to-environment
        uses: microsoft/powerplatform-actions/import-solution@latest
        #env:
        #  import-as-holding: "${{ github.event.inputs.solution_action == 'update' && 'false' || 'true' }}"
        with:
          tenant-id: ${{ env.TENANT_ID }}
          app-id: ${{ env.CLIENT_ID }}
          client-secret: ${{ env.CLIENT_SECRET }}
          solution-file: ${{ steps.get-solution-zip.outputs.solution_zip }}
          import-as-holding: true
          force-overwrite: true
          use-deployment-settings-file: true
          deployment-settings-file: src/${{ github.event.inputs.solution_name }}/config/deploymentSettings.json

  import-data-and-turn-on-flows:
    runs-on: windows-2022
    needs: build-solution
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v2

      - id: import-configuration-migration-data-if-exists
        uses: ./.github/actions/import-configuration-migration-data-if-exists
        with:
          environment_url: ${{ secrets.ENVIRONMENT_URL }}
          solution_name: ${{ github.event.inputs.solution_name }}
          tenant_id: ${{ secrets.TENANT_ID }}
          app_id: ${{ secrets.CLIENT_ID }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          environment: ${{ github.event.inputs.environment }}

      - id: turn-on-flows-impersonation
        uses: ./.github/actions/turn-on-flows-impersonation
        with:
          environment_url: ${{ secrets.ENVIRONMENT_URL }}
          solution_name: ${{ github.event.inputs.solution_name }}
          tenant_id: ${{ secrets.TENANT_ID }}
          app_id: ${{ secrets.CLIENT_ID }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          secrets: ${{ toJSON(secrets) }}

      - if: contains(github.event.inputs.ref, 'refs/pull')
        name: update-commit-status
        id: update-commit-status
        uses: actions/github-script@v5
        env:
          CONTEXT_TO_USE: build-deploy-${{ github.event.inputs.solution_name }}
          SHA: ${{ github.event.inputs.sha }}
          TARGET_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          JOB_STATUS: ${{ job.status }}
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: process.env.SHA,
              context: process.env.CONTEXT_TO_USE,
              state: process.env.JOB_STATUS,
              target_url: process.env.TARGET_URL
            })
